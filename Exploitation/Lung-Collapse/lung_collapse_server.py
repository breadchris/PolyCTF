import SocketServer, sys, random, struct
from threading import Thread

HOST = '0.0.0.0'
PORT = 1337
DATA_LENGTH = 0x1337
FLAG_OFFSET = 0x6969
FLAG = 'flag{wow_you_solved_this_thing_in_a_heart_bleed}'

class SingleTCPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        try:
            data = ""
            while 1:
                d = self.request.recv(1024)
                if not d:
                    break data += d

            if len(data) != DATA_LENGTH:
                try:
                    self.request.send("[-] Invalid data sent")
                except:
                    return
                self.request.close()

            length = struct.unpack("<H", data[2:4])[0]
            bonus_data = ""
            if length > DATA_LENGTH:
                for x in range(length - DATA_LENGTH):
                    if x >= 0x69 and x < (len(FLAG) + 0x69):
                        bonus_data += FLAG[x - 0x69]
                    else:
                        bonus_data += chr(random.randint(0, 0xff))

            self.request.send(data + bonus_data)
        except:
            try:
                self.request.send("[-] Invalid data sent")
            except:
                return

        self.request.close()

class LungCollapseServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    daemon_threads = True
    allow_reuse_address = True

    def __init__(self, server_address, RequestHandlerClass):
        SocketServer.TCPServer.__init__(self, server_address, RequestHandlerClass)

if __name__ == "__main__":
    server = LungCollapseServer((HOST, PORT), SingleTCPHandler)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        sys.exit(0)
