using System;
using System.Linq;

namespace LungCollapseClient
{
	public class StatusCheckerMessage
	{
		public  static int MAX_MESSAGE_BYTES = 0x1337;
		private static int IDENTIFIER_BYTES  = 0x2;
		private static int LENGTH_BYTES      = 0x2;
		public  static int HEADER_LENGTH	 = IDENTIFIER_BYTES + LENGTH_BYTES;
		private static byte PADDING_BYTE     = 0x69;

		private ushort messageLength;
		private ushort identifier;
		private byte messageByte;

		public StatusCheckerMessage ()
		{
			Random rnd = new Random();
			messageLength = (ushort) rnd.Next(
				1, MAX_MESSAGE_BYTES - IDENTIFIER_BYTES - LENGTH_BYTES
			);
			messageByte = 0x42;
		}

		public byte[] generateStatusMessage()
		{
			identifier += 1;
			byte[] message = new byte[MAX_MESSAGE_BYTES];

			byte[] identifierBytes = BitConverter.GetBytes ( identifier );
			Array.Reverse ( identifierBytes );

			byte[] lengthBytes = BitConverter.GetBytes ( messageLength );
			Array.Reverse ( lengthBytes );

			byte[] messageContent = new byte[messageLength];
			for ( int i = 0; i < messageLength; i++ ) {
				messageContent[i] = messageByte;
			}

			System.Buffer.BlockCopy (identifierBytes, 0, message, 0, IDENTIFIER_BYTES);
			System.Buffer.BlockCopy (lengthBytes, 0, message, IDENTIFIER_BYTES, LENGTH_BYTES);
			System.Buffer.BlockCopy (messageContent, 0, message, 
			                         IDENTIFIER_BYTES + LENGTH_BYTES, messageContent.Length);

			for (int i = IDENTIFIER_BYTES + LENGTH_BYTES + messageContent.Length;
			     i < MAX_MESSAGE_BYTES; i++) {
				message[i] = PADDING_BYTE;
			}

			return message;
		}

		public byte[] getResponseContent(byte[] responseMsg)
		{
			byte[] content = new byte [MAX_MESSAGE_BYTES - HEADER_LENGTH];
			System.Buffer.BlockCopy (responseMsg, HEADER_LENGTH, content, 0, content.Length);
			return content;
		}
	}
}

